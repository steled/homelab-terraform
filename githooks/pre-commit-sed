#!/usr/bin/env bash
# Pre-commit Hook: Duplicate decrypted sensitive files and redact sensitive information using sed.

set -euo pipefail
IFS=$'\n\t'

# --- Configuration ---
LOG_ENABLED=true              # set to false to disable output

# --- Helper Functions ---
log() {
  if [ "$LOG_ENABLED" = true ]; then
    echo "[redact-hook] $*"
  fi
}

error_exit() {
  echo "[redact-hook] ERROR: $*" >&2
  exit 1
}

# --- Find files with Git attribute 'filter=crypt' ---
mapfile -t secret_files < <(
  git -c core.quotePath=false ls-files \
    | git -c core.quotePath=false check-attr --stdin filter \
    | awk -F':' '/crypt$/{ gsub(/^[ \t]+|[ \t]+$/, "", $1); print $1 }'
)

if [ ${#secret_files[@]} -eq 0 ]; then
  log "No files with 'filter=crypt' found. Skipping."
  exit 0
fi

# --- Process each secret file ---
for secret_file in "${secret_files[@]}"; do
  # skip symlinks
  if [[ -L "$secret_file" ]]; then
    log "Skipping symlink: $secret_file"
    continue
  fi

  dir="$(dirname "$secret_file")"
  filename="$(basename "$secret_file")"
  file_extension="${filename##*.}"
  file_basename="${filename%.*}"

  sed_file="${dir}/${filename}.sed"

  if [[ ! -f "$sed_file" ]]; then
    log "No sed rules found for: $secret_file (expected $sed_file)"
    continue
  fi

  # Determine output name and path
  if [[ "$file_extension" == "$filename" ]]; then
    output_file="${dir}/${file_basename}_dec"
  else
    output_file="${dir}/${file_basename}.${file_extension}.dec"
  fi

  log "Redacting: $secret_file â†’ $output_file"
  sed -f "$sed_file" "$secret_file" > "$output_file" \
    || error_exit "Failed to apply sed rules to $secret_file"
done

log "Redaction complete."
